#include <limits.h>

#include "gridding_gpu.hpp"

#include "gtest/gtest.h"

#define epsilon 0.0001f

#define get3DC2lin(_x,_y,_z,_width) ((_x) + (_width) * ( (_y) + (_z) * (_width)))

TEST(TestGPUGriddingFFT,KernelCall1Sector)
{
	int kernel_width = 3;
	long kernel_entries = calculateGrid3KernelSize();
	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries);

	//Image
	int im_width = 10;

	//Data
	int data_entries = 1;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	data[0] = 1;
	data[1] = 1;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	coords[0] = 0; //should result in 7,7,7 center
	coords[1] = 0;
	coords[2] = 0;

	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;

	//Output Grid
	CufftType* gdata;
	unsigned long dims_g[4];
    dims_g[0] = 1; /* complex */
	dims_g[1] = (unsigned long)(im_width * osr); 
    dims_g[2] = (unsigned long)(im_width * osr);
    dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];

	gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 9;
	
	int sector_count = 1;
	int* sectors = (int*) calloc(2*sector_count,sizeof(int));
	sectors[0]=0;
	sectors[1]=1;

	int* sector_centers = (int*) calloc(3*sector_count,sizeof(int));
	sector_centers[0] = 5;
	sector_centers[1] = 5;
	sector_centers[2] = 5;

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);
	
	printf("test %f \n",gdata[4].x);
	int index = get3DC2lin(5,5,5,im_width);
	printf("index to test %d\n",index);
	EXPECT_EQ(index,555);
	EXPECT_NEAR(-0.0010f,gdata[index].x,epsilon);
	EXPECT_NEAR(0.0027f,gdata[get3DC2lin(5,4,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.0027f,gdata[get3DC2lin(4,5,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.3262f,gdata[get3DC2lin(0,1,5,im_width)].x,epsilon*10.0f);
	
	/*for (int j=0; j<im_width; j++)
	{
		for (int i=0; i<im_width; i++)
			printf("%.4f ",gdata[get3DC2lin(i,j,5,im_width)].x);
		printf("\n");
	}*/

	free(data);
	free(coords);
	free(gdata);
	free(kern);
	free(sectors);
	free(sector_centers);

	EXPECT_EQ(1, 1);
}


TEST(TestGPUGriddingFFT,GPUTest_Kernel5w64)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;
	//kernel width
	int kernel_width = 5;
	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);
	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 64;

	//Data
	int data_entries = 1;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	data[0] = 1;
	data[1] = 0;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	coords[0] = 0; //should result in 7,7,7 center
	coords[1] = 0;
	coords[2] = 0;

	//Output Grid
    CufftType* gdata;
	unsigned long dims_g[4];
    dims_g[0] = 1; // complex /
	dims_g[1] = (unsigned long)(im_width * osr); 
    dims_g[2] = (unsigned long)(im_width * osr);
    dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];

    gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 8;
	
	const int sector_count = 512;
	int sectors[sector_count+1] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

	int sector_centers[sector_count*3] = {4,4,4,4,4,12,4,4,20,4,4,28,4,4,36,4,4,44,4,4,52,4,4,60,4,12,4,4,12,12,4,12,20,4,12,28,4,12,36,4,12,44,4,12,52,4,12,60,4,20,4,4,20,12,4,20,20,4,20,28,4,20,36,4,20,44,4,20,52,4,20,60,4,28,4,4,28,12,4,28,20,4,28,28,4,28,36,4,28,44,4,28,52,4,28,60,4,36,4,4,36,12,4,36,20,4,36,28,4,36,36,4,36,44,4,36,52,4,36,60,4,44,4,4,44,12,4,44,20,4,44,28,4,44,36,4,44,44,4,44,52,4,44,60,4,52,4,4,52,12,4,52,20,4,52,28,4,52,36,4,52,44,4,52,52,4,52,60,4,60,4,4,60,12,4,60,20,4,60,28,4,60,36,4,60,44,4,60,52,4,60,60,12,4,4,12,4,12,12,4,20,12,4,28,12,4,36,12,4,44,12,4,52,12,4,60,12,12,4,12,12,12,12,12,20,12,12,28,12,12,36,12,12,44,12,12,52,12,12,60,12,20,4,12,20,12,12,20,20,12,20,28,12,20,36,12,20,44,12,20,52,12,20,60,12,28,4,12,28,12,12,28,20,12,28,28,12,28,36,12,28,44,12,28,52,12,28,60,12,36,4,12,36,12,12,36,20,12,36,28,12,36,36,12,36,44,12,36,52,12,36,60,12,44,4,12,44,12,12,44,20,12,44,28,12,44,36,12,44,44,12,44,52,12,44,60,12,52,4,12,52,12,12,52,20,12,52,28,12,52,36,12,52,44,12,52,52,12,52,60,12,60,4,12,60,12,12,60,20,12,60,28,12,60,36,12,60,44,12,60,52,12,60,60,20,4,4,20,4,12,20,4,20,20,4,28,20,4,36,20,4,44,20,4,52,20,4,60,20,12,4,20,12,12,20,12,20,20,12,28,20,12,36,20,12,44,20,12,52,20,12,60,20,20,4,20,20,12,20,20,20,20,20,28,20,20,36,20,20,44,20,20,52,20,20,60,20,28,4,20,28,12,20,28,20,20,28,28,20,28,36,20,28,44,20,28,52,20,28,60,20,36,4,20,36,12,20,36,20,20,36,28,20,36,36,20,36,44,20,36,52,20,36,60,20,44,4,20,44,12,20,44,20,20,44,28,20,44,36,20,44,44,20,44,52,20,44,60,20,52,4,20,52,12,20,52,20,20,52,28,20,52,36,20,52,44,20,52,52,20,52,60,20,60,4,20,60,12,20,60,20,20,60,28,20,60,36,20,60,44,20,60,52,20,60,60,28,4,4,28,4,12,28,4,20,28,4,28,28,4,36,28,4,44,28,4,52,28,4,60,28,12,4,28,12,12,28,12,20,28,12,28,28,12,36,28,12,44,28,12,52,28,12,60,28,20,4,28,20,12,28,20,20,28,20,28,28,20,36,28,20,44,28,20,52,28,20,60,28,28,4,28,28,12,28,28,20,28,28,28,28,28,36,28,28,44,28,28,52,28,28,60,28,36,4,28,36,12,28,36,20,28,36,28,28,36,36,28,36,44,28,36,52,28,36,60,28,44,4,28,44,12,28,44,20,28,44,28,28,44,36,28,44,44,28,44,52,28,44,60,28,52,4,28,52,12,28,52,20,28,52,28,28,52,36,28,52,44,28,52,52,28,52,60,28,60,4,28,60,12,28,60,20,28,60,28,28,60,36,28,60,44,28,60,52,28,60,60,36,4,4,36,4,12,36,4,20,36,4,28,36,4,36,36,4,44,36,4,52,36,4,60,36,12,4,36,12,12,36,12,20,36,12,28,36,12,36,36,12,44,36,12,52,36,12,60,36,20,4,36,20,12,36,20,20,36,20,28,36,20,36,36,20,44,36,20,52,36,20,60,36,28,4,36,28,12,36,28,20,36,28,28,36,28,36,36,28,44,36,28,52,36,28,60,36,36,4,36,36,12,36,36,20,36,36,28,36,36,36,36,36,44,36,36,52,36,36,60,36,44,4,36,44,12,36,44,20,36,44,28,36,44,36,36,44,44,36,44,52,36,44,60,36,52,4,36,52,12,36,52,20,36,52,28,36,52,36,36,52,44,36,52,52,36,52,60,36,60,4,36,60,12,36,60,20,36,60,28,36,60,36,36,60,44,36,60,52,36,60,60,44,4,4,44,4,12,44,4,20,44,4,28,44,4,36,44,4,44,44,4,52,44,4,60,44,12,4,44,12,12,44,12,20,44,12,28,44,12,36,44,12,44,44,12,52,44,12,60,44,20,4,44,20,12,44,20,20,44,20,28,44,20,36,44,20,44,44,20,52,44,20,60,44,28,4,44,28,12,44,28,20,44,28,28,44,28,36,44,28,44,44,28,52,44,28,60,44,36,4,44,36,12,44,36,20,44,36,28,44,36,36,44,36,44,44,36,52,44,36,60,44,44,4,44,44,12,44,44,20,44,44,28,44,44,36,44,44,44,44,44,52,44,44,60,44,52,4,44,52,12,44,52,20,44,52,28,44,52,36,44,52,44,44,52,52,44,52,60,44,60,4,44,60,12,44,60,20,44,60,28,44,60,36,44,60,44,44,60,52,44,60,60,52,4,4,52,4,12,52,4,20,52,4,28,52,4,36,52,4,44,52,4,52,52,4,60,52,12,4,52,12,12,52,12,20,52,12,28,52,12,36,52,12,44,52,12,52,52,12,60,52,20,4,52,20,12,52,20,20,52,20,28,52,20,36,52,20,44,52,20,52,52,20,60,52,28,4,52,28,12,52,28,20,52,28,28,52,28,36,52,28,44,52,28,52,52,28,60,52,36,4,52,36,12,52,36,20,52,36,28,52,36,36,52,36,44,52,36,52,52,36,60,52,44,4,52,44,12,52,44,20,52,44,28,52,44,36,52,44,44,52,44,52,52,44,60,52,52,4,52,52,12,52,52,20,52,52,28,52,52,36,52,52,44,52,52,52,52,52,60,52,60,4,52,60,12,52,60,20,52,60,28,52,60,36,52,60,44,52,60,52,52,60,60,60,4,4,60,4,12,60,4,20,60,4,28,60,4,36,60,4,44,60,4,52,60,4,60,60,12,4,60,12,12,60,12,20,60,12,28,60,12,36,60,12,44,60,12,52,60,12,60,60,20,4,60,20,12,60,20,20,60,20,28,60,20,36,60,20,44,60,20,52,60,20,60,60,28,4,60,28,12,60,28,20,60,28,28,60,28,36,60,28,44,60,28,52,60,28,60,60,36,4,60,36,12,60,36,20,60,36,28,60,36,36,60,36,44,60,36,52,60,36,60,60,44,4,60,44,12,60,44,20,60,44,28,60,44,36,60,44,44,60,44,52,60,44,60,60,52,4,60,52,12,60,52,20,60,52,28,60,52,36,60,52,44,60,52,52,60,52,60,60,60,4,60,60,12,60,60,20,60,60,28,60,60,36,60,60,44,60,60,52,60,60,60};

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);

	EXPECT_NEAR(-0.0010,gdata[get3DC2lin(57,33,32,im_width)].x,epsilon*10.0f);
	
	/*for (int j=0; j<im_width; j++)
	{
		for (int i=0; i<im_width; i++)
			if (abs(gdata[get3DC2lin(i,im_width-j,32,im_width)].x)>0.0f)
				printf("(%d,%d,%d):%.4f ",i,j,32,gdata[get3DC2lin(i,im_width-j,32,im_width)].x);
		printf("\n");
	}*/

	free(data);
	free(coords);
	free(gdata);
	free(kern);
	//free(sectors);
	//free(sector_centers);
}

TEST(DISABLED_TestGPUGriddingFFT,GPUTest_2SectorsKernel3nData)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;
	//kernel width
	int kernel_width = 3;

	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);

	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 10;

	//Data
	int data_entries = 5;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	int data_cnt = 0;
	data[data_cnt++] = 0.5f;
	data[data_cnt++] = 0.5f;
	
	data[data_cnt++] = 0.7f;
	data[data_cnt++] = 1;
	
	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	int coord_cnt = 0;
	//1.Sektor
	coords[coord_cnt++] = -0.3f; 
	coords[coord_cnt++] = 0.2f;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = -0.1f;
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	//2.Sektor
	coords[coord_cnt++] = 0; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.5f; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0;

	//Output Grid
    CufftType* gdata;
	unsigned long dims_g[4];
    dims_g[0] = 1; // complex 
	dims_g[1] = (unsigned long)(im_width * osr); 
    dims_g[2] = (unsigned long)(im_width * osr);
    dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];

    gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 5;
	
	int sector_count = 2;
	int* sectors = (int*) calloc(2*sector_count,sizeof(int));
	sectors[0]=0;
	sectors[1]=2;
	sectors[2]=5;

	int* sector_centers = (int*) calloc(3*sector_count,sizeof(int));
	sector_centers[0] = 2;
	sector_centers[1] = 7;
	sector_centers[2] = 5;

	sector_centers[3] = 7;
	sector_centers[4] = 7;
	sector_centers[5] = 5;

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);

	int index = get3DC2lin(5,5,5,im_width);
	printf("index to test %d\n",index);
	//EXPECT_EQ(index,2*555);
	EXPECT_NEAR(1.3152f,gdata[index].x,epsilon);
	EXPECT_NEAR(0.2432,gdata[get3DC2lin(3,6,5,im_width)].x,epsilon*10.0f);
	
	EXPECT_NEAR(0.2251,gdata[get3DC2lin(1,7,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.4502,gdata[get3DC2lin(6,5,5,im_width)].x,epsilon*10.0f);

	EXPECT_NEAR(1.0f,gdata[get3DC2lin(8,8,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.2027,gdata[get3DC2lin(9,9,5,im_width)].x,epsilon*10.0f);
	
	//for (int j=0; j<im_width; j++)
	//{
	//	for (int i=0; i<im_width; i++)
	//		printf("%.4f ",gdata[get3DC2lin(i,im_width-1-j,5,im_width)]);
	//	printf("\n");
	//}

	free(data);
	free(coords);
	free(gdata);
	free(kern);
	free(sectors);
	free(sector_centers);
}

TEST(DISABLED_TestGPUGriddingFFT,GPUTest_8SectorsKernel3nData)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;
	//kernel width
	int kernel_width = 3;

	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);

	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 10;

	//Data
	int data_entries = 5;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	int data_cnt = 0;
	data[data_cnt++] = 0.5f;
	data[data_cnt++] = 0.5f;
	
	data[data_cnt++] = 0.7f;
	data[data_cnt++] = 1;
	
	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	int coord_cnt = 0;
	//7.Sektor
	coords[coord_cnt++] = -0.3f; 
	coords[coord_cnt++] = 0.2f;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = -0.1f;
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	//8.Sektor
	coords[coord_cnt++] = 0; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.5f; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0;

	//Output Grid
    CufftType* gdata;
	unsigned long dims_g[4];
    dims_g[0] = 1; // complex
	dims_g[1] = (unsigned long)(im_width * osr); 
    dims_g[2] = (unsigned long)(im_width * osr);
    dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];

    gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 5;
	
	int sector_count = 8;
	int* sectors = (int*) calloc(2*sector_count,sizeof(int));
	sectors[0]=0;
	sectors[1]=0;
	sectors[2]=0;
	sectors[3]=0;
	sectors[4]=0;
	sectors[5]=0;
	sectors[6]=0;
	sectors[7]=2;
	sectors[8]=5;

	int* sector_centers = (int*) calloc(3*sector_count,sizeof(int));
	int sector_cnt = 0;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);

	int index = get3DC2lin(5,5,5,im_width);
	printf("index to test %d\n",index);
	//EXPECT_EQ(index,2*555);
	EXPECT_NEAR(1.3152f,gdata[index].x,epsilon);
	EXPECT_NEAR(0.2432,gdata[get3DC2lin(3,6,5,im_width)].x,epsilon*10.0f);
	
	EXPECT_NEAR(0.2251,gdata[get3DC2lin(1,7,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.4502,gdata[get3DC2lin(6,5,5,im_width)].x,epsilon*10.0f);

	EXPECT_NEAR(1.0f,gdata[get3DC2lin(8,8,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.2027,gdata[get3DC2lin(9,9,5,im_width)].x,epsilon*10.0f);

	free(data);
	free(coords);
	free(gdata);
	free(kern);
	free(sectors);
	free(sector_centers);
}

TEST(DISABLED_TestGPUGriddingFFT,GPUTest_8SectorsKernel4nData)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;

	//kernel width
	int kernel_width = 4;

	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);

	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 10;

	//Data
	int data_entries = 5;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	int data_cnt = 0;
	data[data_cnt++] = 0.5f;
	data[data_cnt++] = 0.5f;
	
	data[data_cnt++] = 0.7f;
	data[data_cnt++] = 1;
	
	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	int coord_cnt = 0;
	//7.Sektor
	coords[coord_cnt++] = -0.3f; 
	coords[coord_cnt++] = 0.2f;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = -0.1f;
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	//8.Sektor
	coords[coord_cnt++] = 0; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.5f; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0;

	//Output Grid
    CufftType* gdata;
	unsigned long dims_g[4];
    dims_g[0] = 1; // complex
	dims_g[1] = (unsigned long)(im_width * osr); 
    dims_g[2] = (unsigned long)(im_width * osr);
    dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];

    gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 5;
	
	int sector_count = 8;
	int* sectors = (int*) calloc(2*sector_count,sizeof(int));
	sectors[0]=0;
	sectors[1]=0;
	sectors[2]=0;
	sectors[3]=0;
	sectors[4]=0;
	sectors[5]=0;
	sectors[6]=0;
	sectors[7]=2;
	sectors[8]=5;

	int* sector_centers = (int*) calloc(3*sector_count,sizeof(int));
	int sector_cnt = 0;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);

	int index = get3DC2lin(5,5,5,im_width);
	printf("index to test %d\n",index);
	//EXPECT_EQ(index,2*555);
	EXPECT_NEAR(1.3558f,gdata[index].x,epsilon);
	EXPECT_NEAR(0.3101f,gdata[get3DC2lin(3,6,5,im_width)].x,epsilon*10.0f);
	
	EXPECT_NEAR(0.2542f,gdata[get3DC2lin(1,7,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.5084f,gdata[get3DC2lin(6,5,5,im_width)].x,epsilon*10.0f);

	EXPECT_NEAR(1.0f,gdata[get3DC2lin(8,8,5,im_width)].x,epsilon*10.0f);
	EXPECT_NEAR(0.2585f,gdata[get3DC2lin(9,9,5,im_width)].x,epsilon*10.0f);
	
	//for (int j=0; j<im_width; j++)
	//{
	//	for (int i=0; i<im_width; i++)
	//		printf("%.4f ",gdata[get3DC2lin(i,im_width-1-j,5,im_width)]);
	//	printf("\n");
	//}

	free(data);
	free(coords);
	free(gdata);
	free(kern);
	free(sectors);
	free(sector_centers);
}

TEST(DISABLED_TestGPUGriddingFFT,GPUTest_8SectorsKernel3nDataw128)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;
	//kernel width
	int kernel_width = 3;

	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);

	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 128;

	//Data
	int data_entries = 1;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	int data_cnt = 0;
	data[data_cnt++] = 1.0f;
	data[data_cnt++] = 1.0f;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	int coord_cnt = 0;

	coords[coord_cnt++] = 0.0f; 
	coords[coord_cnt++] = 0.0f;
	coords[coord_cnt++] = 0.0f;

	//Output Grid
    CufftType* gdata;
	unsigned long dims_g[4];
    dims_g[0] = 1; // complex
	dims_g[1] = (unsigned long)(im_width * osr); 
    dims_g[2] = (unsigned long)(im_width * osr);
    dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];

    gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 8;
	
	const int sector_count = 4096;
	const int sectors_cnt = sector_count +1;
	int sectors[sectors_cnt] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
	int sector_centers[3*sector_count] = {4,4,4,4,4,12,4,4,20,4,4,28,4,4,36,4,4,44,4,4,52,4,4,60,4,4,68,4,4,76,4,4,84,4,4,92,4,4,100,4,4,108,4,4,116,4,4,124,4,12,4,4,12,12,4,12,20,4,12,28,4,12,36,4,12,44,4,12,52,4,12,60,4,12,68,4,12,76,4,12,84,4,12,92,4,12,100,4,12,108,4,12,116,4,12,124,4,20,4,4,20,12,4,20,20,4,20,28,4,20,36,4,20,44,4,20,52,4,20,60,4,20,68,4,20,76,4,20,84,4,20,92,4,20,100,4,20,108,4,20,116,4,20,124,4,28,4,4,28,12,4,28,20,4,28,28,4,28,36,4,28,44,4,28,52,4,28,60,4,28,68,4,28,76,4,28,84,4,28,92,4,28,100,4,28,108,4,28,116,4,28,124,4,36,4,4,36,12,4,36,20,4,36,28,4,36,36,4,36,44,4,36,52,4,36,60,4,36,68,4,36,76,4,36,84,4,36,92,4,36,100,4,36,108,4,36,116,4,36,124,4,44,4,4,44,12,4,44,20,4,44,28,4,44,36,4,44,44,4,44,52,4,44,60,4,44,68,4,44,76,4,44,84,4,44,92,4,44,100,4,44,108,4,44,116,4,44,124,4,52,4,4,52,12,4,52,20,4,52,28,4,52,36,4,52,44,4,52,52,4,52,60,4,52,68,4,52,76,4,52,84,4,52,92,4,52,100,4,52,108,4,52,116,4,52,124,4,60,4,4,60,12,4,60,20,4,60,28,4,60,36,4,60,44,4,60,52,4,60,60,4,60,68,4,60,76,4,60,84,4,60,92,4,60,100,4,60,108,4,60,116,4,60,124,4,68,4,4,68,12,4,68,20,4,68,28,4,68,36,4,68,44,4,68,52,4,68,60,4,68,68,4,68,76,4,68,84,4,68,92,4,68,100,4,68,108,4,68,116,4,68,124,4,76,4,4,76,12,4,76,20,4,76,28,4,76,36,4,76,44,4,76,52,4,76,60,4,76,68,4,76,76,4,76,84,4,76,92,4,76,100,4,76,108,4,76,116,4,76,124,4,84,4,4,84,12,4,84,20,4,84,28,4,84,36,4,84,44,4,84,52,4,84,60,4,84,68,4,84,76,4,84,84,4,84,92,4,84,100,4,84,108,4,84,116,4,84,124,4,92,4,4,92,12,4,92,20,4,92,28,4,92,36,4,92,44,4,92,52,4,92,60,4,92,68,4,92,76,4,92,84,4,92,92,4,92,100,4,92,108,4,92,116,4,92,124,4,100,4,4,100,12,4,100,20,4,100,28,4,100,36,4,100,44,4,100,52,4,100,60,4,100,68,4,100,76,4,100,84,4,100,92,4,100,100,4,100,108,4,100,116,4,100,124,4,108,4,4,108,12,4,108,20,4,108,28,4,108,36,4,108,44,4,108,52,4,108,60,4,108,68,4,108,76,4,108,84,4,108,92,4,108,100,4,108,108,4,108,116,4,108,124,4,116,4,4,116,12,4,116,20,4,116,28,4,116,36,4,116,44,4,116,52,4,116,60,4,116,68,4,116,76,4,116,84,4,116,92,4,116,100,4,116,108,4,116,116,4,116,124,4,124,4,4,124,12,4,124,20,4,124,28,4,124,36,4,124,44,4,124,52,4,124,60,4,124,68,4,124,76,4,124,84,4,124,92,4,124,100,4,124,108,4,124,116,4,124,124,12,4,4,12,4,12,12,4,20,12,4,28,12,4,36,12,4,44,12,4,52,12,4,60,12,4,68,12,4,76,12,4,84,12,4,92,12,4,100,12,4,108,12,4,116,12,4,124,12,12,4,12,12,12,12,12,20,12,12,28,12,12,36,12,12,44,12,12,52,12,12,60,12,12,68,12,12,76,12,12,84,12,12,92,12,12,100,12,12,108,12,12,116,12,12,124,12,20,4,12,20,12,12,20,20,12,20,28,12,20,36,12,20,44,12,20,52,12,20,60,12,20,68,12,20,76,12,20,84,12,20,92,12,20,100,12,20,108,12,20,116,12,20,124,12,28,4,12,28,12,12,28,20,12,28,28,12,28,36,12,28,44,12,28,52,12,28,60,12,28,68,12,28,76,12,28,84,12,28,92,12,28,100,12,28,108,12,28,116,12,28,124,12,36,4,12,36,12,12,36,20,12,36,28,12,36,36,12,36,44,12,36,52,12,36,60,12,36,68,12,36,76,12,36,84,12,36,92,12,36,100,12,36,108,12,36,116,12,36,124,12,44,4,12,44,12,12,44,20,12,44,28,12,44,36,12,44,44,12,44,52,12,44,60,12,44,68,12,44,76,12,44,84,12,44,92,12,44,100,12,44,108,12,44,116,12,44,124,12,52,4,12,52,12,12,52,20,12,52,28,12,52,36,12,52,44,12,52,52,12,52,60,12,52,68,12,52,76,12,52,84,12,52,92,12,52,100,12,52,108,12,52,116,12,52,124,12,60,4,12,60,12,12,60,20,12,60,28,12,60,36,12,60,44,12,60,52,12,60,60,12,60,68,12,60,76,12,60,84,12,60,92,12,60,100,12,60,108,12,60,116,12,60,124,12,68,4,12,68,12,12,68,20,12,68,28,12,68,36,12,68,44,12,68,52,12,68,60,12,68,68,12,68,76,12,68,84,12,68,92,12,68,100,12,68,108,12,68,116,12,68,124,12,76,4,12,76,12,12,76,20,12,76,28,12,76,36,12,76,44,12,76,52,12,76,60,12,76,68,12,76,76,12,76,84,12,76,92,12,76,100,12,76,108,12,76,116,12,76,124,12,84,4,12,84,12,12,84,20,12,84,28,12,84,36,12,84,44,12,84,52,12,84,60,12,84,68,12,84,76,12,84,84,12,84,92,12,84,100,12,84,108,12,84,116,12,84,124,12,92,4,12,92,12,12,92,20,12,92,28,12,92,36,12,92,44,12,92,52,12,92,60,12,92,68,12,92,76,12,92,84,12,92,92,12,92,100,12,92,108,12,92,116,12,92,124,12,100,4,12,100,12,12,100,20,12,100,28,12,100,36,12,100,44,12,100,52,12,100,60,12,100,68,12,100,76,12,100,84,12,100,92,12,100,100,12,100,108,12,100,116,12,100,124,12,108,4,12,108,12,12,108,20,12,108,28,12,108,36,12,108,44,12,108,52,12,108,60,12,108,68,12,108,76,12,108,84,12,108,92,12,108,100,12,108,108,12,108,116,12,108,124,12,116,4,12,116,12,12,116,20,12,116,28,12,116,36,12,116,44,12,116,52,12,116,60,12,116,68,12,116,76,12,116,84,12,116,92,12,116,100,12,116,108,12,116,116,12,116,124,12,124,4,12,124,12,12,124,20,12,124,28,12,124,36,12,124,44,12,124,52,12,124,60,12,124,68,12,124,76,12,124,84,12,124,92,12,124,100,12,124,108,12,124,116,12,124,124,20,4,4,20,4,12,20,4,20,20,4,28,20,4,36,20,4,44,20,4,52,20,4,60,20,4,68,20,4,76,20,4,84,20,4,92,20,4,100,20,4,108,20,4,116,20,4,124,20,12,4,20,12,12,20,12,20,20,12,28,20,12,36,20,12,44,20,12,52,20,12,60,20,12,68,20,12,76,20,12,84,20,12,92,20,12,100,20,12,108,20,12,116,20,12,124,20,20,4,20,20,12,20,20,20,20,20,28,20,20,36,20,20,44,20,20,52,20,20,60,20,20,68,20,20,76,20,20,84,20,20,92,20,20,100,20,20,108,20,20,116,20,20,124,20,28,4,20,28,12,20,28,20,20,28,28,20,28,36,20,28,44,20,28,52,20,28,60,20,28,68,20,28,76,20,28,84,20,28,92,20,28,100,20,28,108,20,28,116,20,28,124,20,36,4,20,36,12,20,36,20,20,36,28,20,36,36,20,36,44,20,36,52,20,36,60,20,36,68,20,36,76,20,36,84,20,36,92,20,36,100,20,36,108,20,36,116,20,36,124,20,44,4,20,44,12,20,44,20,20,44,28,20,44,36,20,44,44,20,44,52,20,44,60,20,44,68,20,44,76,20,44,84,20,44,92,20,44,100,20,44,108,20,44,116,20,44,124,20,52,4,20,52,12,20,52,20,20,52,28,20,52,36,20,52,44,20,52,52,20,52,60,20,52,68,20,52,76,20,52,84,20,52,92,20,52,100,20,52,108,20,52,116,20,52,124,20,60,4,20,60,12,20,60,20,20,60,28,20,60,36,20,60,44,20,60,52,20,60,60,20,60,68,20,60,76,20,60,84,20,60,92,20,60,100,20,60,108,20,60,116,20,60,124,20,68,4,20,68,12,20,68,20,20,68,28,20,68,36,20,68,44,20,68,52,20,68,60,20,68,68,20,68,76,20,68,84,20,68,92,20,68,100,20,68,108,20,68,116,20,68,124,20,76,4,20,76,12,20,76,20,20,76,28,20,76,36,20,76,44,20,76,52,20,76,60,20,76,68,20,76,76,20,76,84,20,76,92,20,76,100,20,76,108,20,76,116,20,76,124,20,84,4,20,84,12,20,84,20,20,84,28,20,84,36,20,84,44,20,84,52,20,84,60,20,84,68,20,84,76,20,84,84,20,84,92,20,84,100,20,84,108,20,84,116,20,84,124,20,92,4,20,92,12,20,92,20,20,92,28,20,92,36,20,92,44,20,92,52,20,92,60,20,92,68,20,92,76,20,92,84,20,92,92,20,92,100,20,92,108,20,92,116,20,92,124,20,100,4,20,100,12,20,100,20,20,100,28,20,100,36,20,100,44,20,100,52,20,100,60,20,100,68,20,100,76,20,100,84,20,100,92,20,100,100,20,100,108,20,100,116,20,100,124,20,108,4,20,108,12,20,108,20,20,108,28,20,108,36,20,108,44,20,108,52,20,108,60,20,108,68,20,108,76,20,108,84,20,108,92,20,108,100,20,108,108,20,108,116,20,108,124,20,116,4,20,116,12,20,116,20,20,116,28,20,116,36,20,116,44,20,116,52,20,116,60,20,116,68,20,116,76,20,116,84,20,116,92,20,116,100,20,116,108,20,116,116,20,116,124,20,124,4,20,124,12,20,124,20,20,124,28,20,124,36,20,124,44,20,124,52,20,124,60,20,124,68,20,124,76,20,124,84,20,124,92,20,124,100,20,124,108,20,124,116,20,124,124,28,4,4,28,4,12,28,4,20,28,4,28,28,4,36,28,4,44,28,4,52,28,4,60,28,4,68,28,4,76,28,4,84,28,4,92,28,4,100,28,4,108,28,4,116,28,4,124,28,12,4,28,12,12,28,12,20,28,12,28,28,12,36,28,12,44,28,12,52,28,12,60,28,12,68,28,12,76,28,12,84,28,12,92,28,12,100,28,12,108,28,12,116,28,12,124,28,20,4,28,20,12,28,20,20,28,20,28,28,20,36,28,20,44,28,20,52,28,20,60,28,20,68,28,20,76,28,20,84,28,20,92,28,20,100,28,20,108,28,20,116,28,20,124,28,28,4,28,28,12,28,28,20,28,28,28,28,28,36,28,28,44,28,28,52,28,28,60,28,28,68,28,28,76,28,28,84,28,28,92,28,28,100,28,28,108,28,28,116,28,28,124,28,36,4,28,36,12,28,36,20,28,36,28,28,36,36,28,36,44,28,36,52,28,36,60,28,36,68,28,36,76,28,36,84,28,36,92,28,36,100,28,36,108,28,36,116,28,36,124,28,44,4,28,44,12,28,44,20,28,44,28,28,44,36,28,44,44,28,44,52,28,44,60,28,44,68,28,44,76,28,44,84,28,44,92,28,44,100,28,44,108,28,44,116,28,44,124,28,52,4,28,52,12,28,52,20,28,52,28,28,52,36,28,52,44,28,52,52,28,52,60,28,52,68,28,52,76,28,52,84,28,52,92,28,52,100,28,52,108,28,52,116,28,52,124,28,60,4,28,60,12,28,60,20,28,60,28,28,60,36,28,60,44,28,60,52,28,60,60,28,60,68,28,60,76,28,60,84,28,60,92,28,60,100,28,60,108,28,60,116,28,60,124,28,68,4,28,68,12,28,68,20,28,68,28,28,68,36,28,68,44,28,68,52,28,68,60,28,68,68,28,68,76,28,68,84,28,68,92,28,68,100,28,68,108,28,68,116,28,68,124,28,76,4,28,76,12,28,76,20,28,76,28,28,76,36,28,76,44,28,76,52,28,76,60,28,76,68,28,76,76,28,76,84,28,76,92,28,76,100,28,76,108,28,76,116,28,76,124,28,84,4,28,84,12,28,84,20,28,84,28,28,84,36,28,84,44,28,84,52,28,84,60,28,84,68,28,84,76,28,84,84,28,84,92,28,84,100,28,84,108,28,84,116,28,84,124,28,92,4,28,92,12,28,92,20,28,92,28,28,92,36,28,92,44,28,92,52,28,92,60,28,92,68,28,92,76,28,92,84,28,92,92,28,92,100,28,92,108,28,92,116,28,92,124,28,100,4,28,100,12,28,100,20,28,100,28,28,100,36,28,100,44,28,100,52,28,100,60,28,100,68,28,100,76,28,100,84,28,100,92,28,100,100,28,100,108,28,100,116,28,100,124,28,108,4,28,108,12,28,108,20,28,108,28,28,108,36,28,108,44,28,108,52,28,108,60,28,108,68,28,108,76,28,108,84,28,108,92,28,108,100,28,108,108,28,108,116,28,108,124,28,116,4,28,116,12,28,116,20,28,116,28,28,116,36,28,116,44,28,116,52,28,116,60,28,116,68,28,116,76,28,116,84,28,116,92,28,116,100,28,116,108,28,116,116,28,116,124,28,124,4,28,124,12,28,124,20,28,124,28,28,124,36,28,124,44,28,124,52,28,124,60,28,124,68,28,124,76,28,124,84,28,124,92,28,124,100,28,124,108,28,124,116,28,124,124,36,4,4,36,4,12,36,4,20,36,4,28,36,4,36,36,4,44,36,4,52,36,4,60,36,4,68,36,4,76,36,4,84,36,4,92,36,4,100,36,4,108,36,4,116,36,4,124,36,12,4,36,12,12,36,12,20,36,12,28,36,12,36,36,12,44,36,12,52,36,12,60,36,12,68,36,12,76,36,12,84,36,12,92,36,12,100,36,12,108,36,12,116,36,12,124,36,20,4,36,20,12,36,20,20,36,20,28,36,20,36,36,20,44,36,20,52,36,20,60,36,20,68,36,20,76,36,20,84,36,20,92,36,20,100,36,20,108,36,20,116,36,20,124,36,28,4,36,28,12,36,28,20,36,28,28,36,28,36,36,28,44,36,28,52,36,28,60,36,28,68,36,28,76,36,28,84,36,28,92,36,28,100,36,28,108,36,28,116,36,28,124,36,36,4,36,36,12,36,36,20,36,36,28,36,36,36,36,36,44,36,36,52,36,36,60,36,36,68,36,36,76,36,36,84,36,36,92,36,36,100,36,36,108,36,36,116,36,36,124,36,44,4,36,44,12,36,44,20,36,44,28,36,44,36,36,44,44,36,44,52,36,44,60,36,44,68,36,44,76,36,44,84,36,44,92,36,44,100,36,44,108,36,44,116,36,44,124,36,52,4,36,52,12,36,52,20,36,52,28,36,52,36,36,52,44,36,52,52,36,52,60,36,52,68,36,52,76,36,52,84,36,52,92,36,52,100,36,52,108,36,52,116,36,52,124,36,60,4,36,60,12,36,60,20,36,60,28,36,60,36,36,60,44,36,60,52,36,60,60,36,60,68,36,60,76,36,60,84,36,60,92,36,60,100,36,60,108,36,60,116,36,60,124,36,68,4,36,68,12,36,68,20,36,68,28,36,68,36,36,68,44,36,68,52,36,68,60,36,68,68,36,68,76,36,68,84,36,68,92,36,68,100,36,68,108,36,68,116,36,68,124,36,76,4,36,76,12,36,76,20,36,76,28,36,76,36,36,76,44,36,76,52,36,76,60,36,76,68,36,76,76,36,76,84,36,76,92,36,76,100,36,76,108,36,76,116,36,76,124,36,84,4,36,84,12,36,84,20,36,84,28,36,84,36,36,84,44,36,84,52,36,84,60,36,84,68,36,84,76,36,84,84,36,84,92,36,84,100,36,84,108,36,84,116,36,84,124,36,92,4,36,92,12,36,92,20,36,92,28,36,92,36,36,92,44,36,92,52,36,92,60,36,92,68,36,92,76,36,92,84,36,92,92,36,92,100,36,92,108,36,92,116,36,92,124,36,100,4,36,100,12,36,100,20,36,100,28,36,100,36,36,100,44,36,100,52,36,100,60,36,100,68,36,100,76,36,100,84,36,100,92,36,100,100,36,100,108,36,100,116,36,100,124,36,108,4,36,108,12,36,108,20,36,108,28,36,108,36,36,108,44,36,108,52,36,108,60,36,108,68,36,108,76,36,108,84,36,108,92,36,108,100,36,108,108,36,108,116,36,108,124,36,116,4,36,116,12,36,116,20,36,116,28,36,116,36,36,116,44,36,116,52,36,116,60,36,116,68,36,116,76,36,116,84,36,116,92,36,116,100,36,116,108,36,116,116,36,116,124,36,124,4,36,124,12,36,124,20,36,124,28,36,124,36,36,124,44,36,124,52,36,124,60,36,124,68,36,124,76,36,124,84,36,124,92,36,124,100,36,124,108,36,124,116,36,124,124,44,4,4,44,4,12,44,4,20,44,4,28,44,4,36,44,4,44,44,4,52,44,4,60,44,4,68,44,4,76,44,4,84,44,4,92,44,4,100,44,4,108,44,4,116,44,4,124,44,12,4,44,12,12,44,12,20,44,12,28,44,12,36,44,12,44,44,12,52,44,12,60,44,12,68,44,12,76,44,12,84,44,12,92,44,12,100,44,12,108,44,12,116,44,12,124,44,20,4,44,20,12,44,20,20,44,20,28,44,20,36,44,20,44,44,20,52,44,20,60,44,20,68,44,20,76,44,20,84,44,20,92,44,20,100,44,20,108,44,20,116,44,20,124,44,28,4,44,28,12,44,28,20,44,28,28,44,28,36,44,28,44,44,28,52,44,28,60,44,28,68,44,28,76,44,28,84,44,28,92,44,28,100,44,28,108,44,28,116,44,28,124,44,36,4,44,36,12,44,36,20,44,36,28,44,36,36,44,36,44,44,36,52,44,36,60,44,36,68,44,36,76,44,36,84,44,36,92,44,36,100,44,36,108,44,36,116,44,36,124,44,44,4,44,44,12,44,44,20,44,44,28,44,44,36,44,44,44,44,44,52,44,44,60,44,44,68,44,44,76,44,44,84,44,44,92,44,44,100,44,44,108,44,44,116,44,44,124,44,52,4,44,52,12,44,52,20,44,52,28,44,52,36,44,52,44,44,52,52,44,52,60,44,52,68,44,52,76,44,52,84,44,52,92,44,52,100,44,52,108,44,52,116,44,52,124,44,60,4,44,60,12,44,60,20,44,60,28,44,60,36,44,60,44,44,60,52,44,60,60,44,60,68,44,60,76,44,60,84,44,60,92,44,60,100,44,60,108,44,60,116,44,60,124,44,68,4,44,68,12,44,68,20,44,68,28,44,68,36,44,68,44,44,68,52,44,68,60,44,68,68,44,68,76,44,68,84,44,68,92,44,68,100,44,68,108,44,68,116,44,68,124,44,76,4,44,76,12,44,76,20,44,76,28,44,76,36,44,76,44,44,76,52,44,76,60,44,76,68,44,76,76,44,76,84,44,76,92,44,76,100,44,76,108,44,76,116,44,76,124,44,84,4,44,84,12,44,84,20,44,84,28,44,84,36,44,84,44,44,84,52,44,84,60,44,84,68,44,84,76,44,84,84,44,84,92,44,84,100,44,84,108,44,84,116,44,84,124,44,92,4,44,92,12,44,92,20,44,92,28,44,92,36,44,92,44,44,92,52,44,92,60,44,92,68,44,92,76,44,92,84,44,92,92,44,92,100,44,92,108,44,92,116,44,92,124,44,100,4,44,100,12,44,100,20,44,100,28,44,100,36,44,100,44,44,100,52,44,100,60,44,100,68,44,100,76,44,100,84,44,100,92,44,100,100,44,100,108,44,100,116,44,100,124,44,108,4,44,108,12,44,108,20,44,108,28,44,108,36,44,108,44,44,108,52,44,108,60,44,108,68,44,108,76,44,108,84,44,108,92,44,108,100,44,108,108,44,108,116,44,108,124,44,116,4,44,116,12,44,116,20,44,116,28,44,116,36,44,116,44,44,116,52,44,116,60,44,116,68,44,116,76,44,116,84,44,116,92,44,116,100,44,116,108,44,116,116,44,116,124,44,124,4,44,124,12,44,124,20,44,124,28,44,124,36,44,124,44,44,124,52,44,124,60,44,124,68,44,124,76,44,124,84,44,124,92,44,124,100,44,124,108,44,124,116,44,124,124,52,4,4,52,4,12,52,4,20,52,4,28,52,4,36,52,4,44,52,4,52,52,4,60,52,4,68,52,4,76,52,4,84,52,4,92,52,4,100,52,4,108,52,4,116,52,4,124,52,12,4,52,12,12,52,12,20,52,12,28,52,12,36,52,12,44,52,12,52,52,12,60,52,12,68,52,12,76,52,12,84,52,12,92,52,12,100,52,12,108,52,12,116,52,12,124,52,20,4,52,20,12,52,20,20,52,20,28,52,20,36,52,20,44,52,20,52,52,20,60,52,20,68,52,20,76,52,20,84,52,20,92,52,20,100,52,20,108,52,20,116,52,20,124,52,28,4,52,28,12,52,28,20,52,28,28,52,28,36,52,28,44,52,28,52,52,28,60,52,28,68,52,28,76,52,28,84,52,28,92,52,28,100,52,28,108,52,28,116,52,28,124,52,36,4,52,36,12,52,36,20,52,36,28,52,36,36,52,36,44,52,36,52,52,36,60,52,36,68,52,36,76,52,36,84,52,36,92,52,36,100,52,36,108,52,36,116,52,36,124,52,44,4,52,44,12,52,44,20,52,44,28,52,44,36,52,44,44,52,44,52,52,44,60,52,44,68,52,44,76,52,44,84,52,44,92,52,44,100,52,44,108,52,44,116,52,44,124,52,52,4,52,52,12,52,52,20,52,52,28,52,52,36,52,52,44,52,52,52,52,52,60,52,52,68,52,52,76,52,52,84,52,52,92,52,52,100,52,52,108,52,52,116,52,52,124,52,60,4,52,60,12,52,60,20,52,60,28,52,60,36,52,60,44,52,60,52,52,60,60,52,60,68,52,60,76,52,60,84,52,60,92,52,60,100,52,60,108,52,60,116,52,60,124,52,68,4,52,68,12,52,68,20,52,68,28,52,68,36,52,68,44,52,68,52,52,68,60,52,68,68,52,68,76,52,68,84,52,68,92,52,68,100,52,68,108,52,68,116,52,68,124,52,76,4,52,76,12,52,76,20,52,76,28,52,76,36,52,76,44,52,76,52,52,76,60,52,76,68,52,76,76,52,76,84,52,76,92,52,76,100,52,76,108,52,76,116,52,76,124,52,84,4,52,84,12,52,84,20,52,84,28,52,84,36,52,84,44,52,84,52,52,84,60,52,84,68,52,84,76,52,84,84,52,84,92,52,84,100,52,84,108,52,84,116,52,84,124,52,92,4,52,92,12,52,92,20,52,92,28,52,92,36,52,92,44,52,92,52,52,92,60,52,92,68,52,92,76,52,92,84,52,92,92,52,92,100,52,92,108,52,92,116,52,92,124,52,100,4,52,100,12,52,100,20,52,100,28,52,100,36,52,100,44,52,100,52,52,100,60,52,100,68,52,100,76,52,100,84,52,100,92,52,100,100,52,100,108,52,100,116,52,100,124,52,108,4,52,108,12,52,108,20,52,108,28,52,108,36,52,108,44,52,108,52,52,108,60,52,108,68,52,108,76,52,108,84,52,108,92,52,108,100,52,108,108,52,108,116,52,108,124,52,116,4,52,116,12,52,116,20,52,116,28,52,116,36,52,116,44,52,116,52,52,116,60,52,116,68,52,116,76,52,116,84,52,116,92,52,116,100,52,116,108,52,116,116,52,116,124,52,124,4,52,124,12,52,124,20,52,124,28,52,124,36,52,124,44,52,124,52,52,124,60,52,124,68,52,124,76,52,124,84,52,124,92,52,124,100,52,124,108,52,124,116,52,124,124,60,4,4,60,4,12,60,4,20,60,4,28,60,4,36,60,4,44,60,4,52,60,4,60,60,4,68,60,4,76,60,4,84,60,4,92,60,4,100,60,4,108,60,4,116,60,4,124,60,12,4,60,12,12,60,12,20,60,12,28,60,12,36,60,12,44,60,12,52,60,12,60,60,12,68,60,12,76,60,12,84,60,12,92,60,12,100,60,12,108,60,12,116,60,12,124,60,20,4,60,20,12,60,20,20,60,20,28,60,20,36,60,20,44,60,20,52,60,20,60,60,20,68,60,20,76,60,20,84,60,20,92,60,20,100,60,20,108,60,20,116,60,20,124,60,28,4,60,28,12,60,28,20,60,28,28,60,28,36,60,28,44,60,28,52,60,28,60,60,28,68,60,28,76,60,28,84,60,28,92,60,28,100,60,28,108,60,28,116,60,28,124,60,36,4,60,36,12,60,36,20,60,36,28,60,36,36,60,36,44,60,36,52,60,36,60,60,36,68,60,36,76,60,36,84,60,36,92,60,36,100,60,36,108,60,36,116,60,36,124,60,44,4,60,44,12,60,44,20,60,44,28,60,44,36,60,44,44,60,44,52,60,44,60,60,44,68,60,44,76,60,44,84,60,44,92,60,44,100,60,44,108,60,44,116,60,44,124,60,52,4,60,52,12,60,52,20,60,52,28,60,52,36,60,52,44,60,52,52,60,52,60,60,52,68,60,52,76,60,52,84,60,52,92,60,52,100,60,52,108,60,52,116,60,52,124,60,60,4,60,60,12,60,60,20,60,60,28,60,60,36,60,60,44,60,60,52,60,60,60,60,60,68,60,60,76,60,60,84,60,60,92,60,60,100,60,60,108,60,60,116,60,60,124,60,68,4,60,68,12,60,68,20,60,68,28,60,68,36,60,68,44,60,68,52,60,68,60,60,68,68,60,68,76,60,68,84,60,68,92,60,68,100,60,68,108,60,68,116,60,68,124,60,76,4,60,76,12,60,76,20,60,76,28,60,76,36,60,76,44,60,76,52,60,76,60,60,76,68,60,76,76,60,76,84,60,76,92,60,76,100,60,76,108,60,76,116,60,76,124,60,84,4,60,84,12,60,84,20,60,84,28,60,84,36,60,84,44,60,84,52,60,84,60,60,84,68,60,84,76,60,84,84,60,84,92,60,84,100,60,84,108,60,84,116,60,84,124,60,92,4,60,92,12,60,92,20,60,92,28,60,92,36,60,92,44,60,92,52,60,92,60,60,92,68,60,92,76,60,92,84,60,92,92,60,92,100,60,92,108,60,92,116,60,92,124,60,100,4,60,100,12,60,100,20,60,100,28,60,100,36,60,100,44,60,100,52,60,100,60,60,100,68,60,100,76,60,100,84,60,100,92,60,100,100,60,100,108,60,100,116,60,100,124,60,108,4,60,108,12,60,108,20,60,108,28,60,108,36,60,108,44,60,108,52,60,108,60,60,108,68,60,108,76,60,108,84,60,108,92,60,108,100,60,108,108,60,108,116,60,108,124,60,116,4,60,116,12,60,116,20,60,116,28,60,116,36,60,116,44,60,116,52,60,116,60,60,116,68,60,116,76,60,116,84,60,116,92,60,116,100,60,116,108,60,116,116,60,116,124,60,124,4,60,124,12,60,124,20,60,124,28,60,124,36,60,124,44,60,124,52,60,124,60,60,124,68,60,124,76,60,124,84,60,124,92,60,124,100,60,124,108,60,124,116,60,124,124,68,4,4,68,4,12,68,4,20,68,4,28,68,4,36,68,4,44,68,4,52,68,4,60,68,4,68,68,4,76,68,4,84,68,4,92,68,4,100,68,4,108,68,4,116,68,4,124,68,12,4,68,12,12,68,12,20,68,12,28,68,12,36,68,12,44,68,12,52,68,12,60,68,12,68,68,12,76,68,12,84,68,12,92,68,12,100,68,12,108,68,12,116,68,12,124,68,20,4,68,20,12,68,20,20,68,20,28,68,20,36,68,20,44,68,20,52,68,20,60,68,20,68,68,20,76,68,20,84,68,20,92,68,20,100,68,20,108,68,20,116,68,20,124,68,28,4,68,28,12,68,28,20,68,28,28,68,28,36,68,28,44,68,28,52,68,28,60,68,28,68,68,28,76,68,28,84,68,28,92,68,28,100,68,28,108,68,28,116,68,28,124,68,36,4,68,36,12,68,36,20,68,36,28,68,36,36,68,36,44,68,36,52,68,36,60,68,36,68,68,36,76,68,36,84,68,36,92,68,36,100,68,36,108,68,36,116,68,36,124,68,44,4,68,44,12,68,44,20,68,44,28,68,44,36,68,44,44,68,44,52,68,44,60,68,44,68,68,44,76,68,44,84,68,44,92,68,44,100,68,44,108,68,44,116,68,44,124,68,52,4,68,52,12,68,52,20,68,52,28,68,52,36,68,52,44,68,52,52,68,52,60,68,52,68,68,52,76,68,52,84,68,52,92,68,52,100,68,52,108,68,52,116,68,52,124,68,60,4,68,60,12,68,60,20,68,60,28,68,60,36,68,60,44,68,60,52,68,60,60,68,60,68,68,60,76,68,60,84,68,60,92,68,60,100,68,60,108,68,60,116,68,60,124,68,68,4,68,68,12,68,68,20,68,68,28,68,68,36,68,68,44,68,68,52,68,68,60,68,68,68,68,68,76,68,68,84,68,68,92,68,68,100,68,68,108,68,68,116,68,68,124,68,76,4,68,76,12,68,76,20,68,76,28,68,76,36,68,76,44,68,76,52,68,76,60,68,76,68,68,76,76,68,76,84,68,76,92,68,76,100,68,76,108,68,76,116,68,76,124,68,84,4,68,84,12,68,84,20,68,84,28,68,84,36,68,84,44,68,84,52,68,84,60,68,84,68,68,84,76,68,84,84,68,84,92,68,84,100,68,84,108,68,84,116,68,84,124,68,92,4,68,92,12,68,92,20,68,92,28,68,92,36,68,92,44,68,92,52,68,92,60,68,92,68,68,92,76,68,92,84,68,92,92,68,92,100,68,92,108,68,92,116,68,92,124,68,100,4,68,100,12,68,100,20,68,100,28,68,100,36,68,100,44,68,100,52,68,100,60,68,100,68,68,100,76,68,100,84,68,100,92,68,100,100,68,100,108,68,100,116,68,100,124,68,108,4,68,108,12,68,108,20,68,108,28,68,108,36,68,108,44,68,108,52,68,108,60,68,108,68,68,108,76,68,108,84,68,108,92,68,108,100,68,108,108,68,108,116,68,108,124,68,116,4,68,116,12,68,116,20,68,116,28,68,116,36,68,116,44,68,116,52,68,116,60,68,116,68,68,116,76,68,116,84,68,116,92,68,116,100,68,116,108,68,116,116,68,116,124,68,124,4,68,124,12,68,124,20,68,124,28,68,124,36,68,124,44,68,124,52,68,124,60,68,124,68,68,124,76,68,124,84,68,124,92,68,124,100,68,124,108,68,124,116,68,124,124,76,4,4,76,4,12,76,4,20,76,4,28,76,4,36,76,4,44,76,4,52,76,4,60,76,4,68,76,4,76,76,4,84,76,4,92,76,4,100,76,4,108,76,4,116,76,4,124,76,12,4,76,12,12,76,12,20,76,12,28,76,12,36,76,12,44,76,12,52,76,12,60,76,12,68,76,12,76,76,12,84,76,12,92,76,12,100,76,12,108,76,12,116,76,12,124,76,20,4,76,20,12,76,20,20,76,20,28,76,20,36,76,20,44,76,20,52,76,20,60,76,20,68,76,20,76,76,20,84,76,20,92,76,20,100,76,20,108,76,20,116,76,20,124,76,28,4,76,28,12,76,28,20,76,28,28,76,28,36,76,28,44,76,28,52,76,28,60,76,28,68,76,28,76,76,28,84,76,28,92,76,28,100,76,28,108,76,28,116,76,28,124,76,36,4,76,36,12,76,36,20,76,36,28,76,36,36,76,36,44,76,36,52,76,36,60,76,36,68,76,36,76,76,36,84,76,36,92,76,36,100,76,36,108,76,36,116,76,36,124,76,44,4,76,44,12,76,44,20,76,44,28,76,44,36,76,44,44,76,44,52,76,44,60,76,44,68,76,44,76,76,44,84,76,44,92,76,44,100,76,44,108,76,44,116,76,44,124,76,52,4,76,52,12,76,52,20,76,52,28,76,52,36,76,52,44,76,52,52,76,52,60,76,52,68,76,52,76,76,52,84,76,52,92,76,52,100,76,52,108,76,52,116,76,52,124,76,60,4,76,60,12,76,60,20,76,60,28,76,60,36,76,60,44,76,60,52,76,60,60,76,60,68,76,60,76,76,60,84,76,60,92,76,60,100,76,60,108,76,60,116,76,60,124,76,68,4,76,68,12,76,68,20,76,68,28,76,68,36,76,68,44,76,68,52,76,68,60,76,68,68,76,68,76,76,68,84,76,68,92,76,68,100,76,68,108,76,68,116,76,68,124,76,76,4,76,76,12,76,76,20,76,76,28,76,76,36,76,76,44,76,76,52,76,76,60,76,76,68,76,76,76,76,76,84,76,76,92,76,76,100,76,76,108,76,76,116,76,76,124,76,84,4,76,84,12,76,84,20,76,84,28,76,84,36,76,84,44,76,84,52,76,84,60,76,84,68,76,84,76,76,84,84,76,84,92,76,84,100,76,84,108,76,84,116,76,84,124,76,92,4,76,92,12,76,92,20,76,92,28,76,92,36,76,92,44,76,92,52,76,92,60,76,92,68,76,92,76,76,92,84,76,92,92,76,92,100,76,92,108,76,92,116,76,92,124,76,100,4,76,100,12,76,100,20,76,100,28,76,100,36,76,100,44,76,100,52,76,100,60,76,100,68,76,100,76,76,100,84,76,100,92,76,100,100,76,100,108,76,100,116,76,100,124,76,108,4,76,108,12,76,108,20,76,108,28,76,108,36,76,108,44,76,108,52,76,108,60,76,108,68,76,108,76,76,108,84,76,108,92,76,108,100,76,108,108,76,108,116,76,108,124,76,116,4,76,116,12,76,116,20,76,116,28,76,116,36,76,116,44,76,116,52,76,116,60,76,116,68,76,116,76,76,116,84,76,116,92,76,116,100,76,116,108,76,116,116,76,116,124,76,124,4,76,124,12,76,124,20,76,124,28,76,124,36,76,124,44,76,124,52,76,124,60,76,124,68,76,124,76,76,124,84,76,124,92,76,124,100,76,124,108,76,124,116,76,124,124,84,4,4,84,4,12,84,4,20,84,4,28,84,4,36,84,4,44,84,4,52,84,4,60,84,4,68,84,4,76,84,4,84,84,4,92,84,4,100,84,4,108,84,4,116,84,4,124,84,12,4,84,12,12,84,12,20,84,12,28,84,12,36,84,12,44,84,12,52,84,12,60,84,12,68,84,12,76,84,12,84,84,12,92,84,12,100,84,12,108,84,12,116,84,12,124,84,20,4,84,20,12,84,20,20,84,20,28,84,20,36,84,20,44,84,20,52,84,20,60,84,20,68,84,20,76,84,20,84,84,20,92,84,20,100,84,20,108,84,20,116,84,20,124,84,28,4,84,28,12,84,28,20,84,28,28,84,28,36,84,28,44,84,28,52,84,28,60,84,28,68,84,28,76,84,28,84,84,28,92,84,28,100,84,28,108,84,28,116,84,28,124,84,36,4,84,36,12,84,36,20,84,36,28,84,36,36,84,36,44,84,36,52,84,36,60,84,36,68,84,36,76,84,36,84,84,36,92,84,36,100,84,36,108,84,36,116,84,36,124,84,44,4,84,44,12,84,44,20,84,44,28,84,44,36,84,44,44,84,44,52,84,44,60,84,44,68,84,44,76,84,44,84,84,44,92,84,44,100,84,44,108,84,44,116,84,44,124,84,52,4,84,52,12,84,52,20,84,52,28,84,52,36,84,52,44,84,52,52,84,52,60,84,52,68,84,52,76,84,52,84,84,52,92,84,52,100,84,52,108,84,52,116,84,52,124,84,60,4,84,60,12,84,60,20,84,60,28,84,60,36,84,60,44,84,60,52,84,60,60,84,60,68,84,60,76,84,60,84,84,60,92,84,60,100,84,60,108,84,60,116,84,60,124,84,68,4,84,68,12,84,68,20,84,68,28,84,68,36,84,68,44,84,68,52,84,68,60,84,68,68,84,68,76,84,68,84,84,68,92,84,68,100,84,68,108,84,68,116,84,68,124,84,76,4,84,76,12,84,76,20,84,76,28,84,76,36,84,76,44,84,76,52,84,76,60,84,76,68,84,76,76,84,76,84,84,76,92,84,76,100,84,76,108,84,76,116,84,76,124,84,84,4,84,84,12,84,84,20,84,84,28,84,84,36,84,84,44,84,84,52,84,84,60,84,84,68,84,84,76,84,84,84,84,84,92,84,84,100,84,84,108,84,84,116,84,84,124,84,92,4,84,92,12,84,92,20,84,92,28,84,92,36,84,92,44,84,92,52,84,92,60,84,92,68,84,92,76,84,92,84,84,92,92,84,92,100,84,92,108,84,92,116,84,92,124,84,100,4,84,100,12,84,100,20,84,100,28,84,100,36,84,100,44,84,100,52,84,100,60,84,100,68,84,100,76,84,100,84,84,100,92,84,100,100,84,100,108,84,100,116,84,100,124,84,108,4,84,108,12,84,108,20,84,108,28,84,108,36,84,108,44,84,108,52,84,108,60,84,108,68,84,108,76,84,108,84,84,108,92,84,108,100,84,108,108,84,108,116,84,108,124,84,116,4,84,116,12,84,116,20,84,116,28,84,116,36,84,116,44,84,116,52,84,116,60,84,116,68,84,116,76,84,116,84,84,116,92,84,116,100,84,116,108,84,116,116,84,116,124,84,124,4,84,124,12,84,124,20,84,124,28,84,124,36,84,124,44,84,124,52,84,124,60,84,124,68,84,124,76,84,124,84,84,124,92,84,124,100,84,124,108,84,124,116,84,124,124,92,4,4,92,4,12,92,4,20,92,4,28,92,4,36,92,4,44,92,4,52,92,4,60,92,4,68,92,4,76,92,4,84,92,4,92,92,4,100,92,4,108,92,4,116,92,4,124,92,12,4,92,12,12,92,12,20,92,12,28,92,12,36,92,12,44,92,12,52,92,12,60,92,12,68,92,12,76,92,12,84,92,12,92,92,12,100,92,12,108,92,12,116,92,12,124,92,20,4,92,20,12,92,20,20,92,20,28,92,20,36,92,20,44,92,20,52,92,20,60,92,20,68,92,20,76,92,20,84,92,20,92,92,20,100,92,20,108,92,20,116,92,20,124,92,28,4,92,28,12,92,28,20,92,28,28,92,28,36,92,28,44,92,28,52,92,28,60,92,28,68,92,28,76,92,28,84,92,28,92,92,28,100,92,28,108,92,28,116,92,28,124,92,36,4,92,36,12,92,36,20,92,36,28,92,36,36,92,36,44,92,36,52,92,36,60,92,36,68,92,36,76,92,36,84,92,36,92,92,36,100,92,36,108,92,36,116,92,36,124,92,44,4,92,44,12,92,44,20,92,44,28,92,44,36,92,44,44,92,44,52,92,44,60,92,44,68,92,44,76,92,44,84,92,44,92,92,44,100,92,44,108,92,44,116,92,44,124,92,52,4,92,52,12,92,52,20,92,52,28,92,52,36,92,52,44,92,52,52,92,52,60,92,52,68,92,52,76,92,52,84,92,52,92,92,52,100,92,52,108,92,52,116,92,52,124,92,60,4,92,60,12,92,60,20,92,60,28,92,60,36,92,60,44,92,60,52,92,60,60,92,60,68,92,60,76,92,60,84,92,60,92,92,60,100,92,60,108,92,60,116,92,60,124,92,68,4,92,68,12,92,68,20,92,68,28,92,68,36,92,68,44,92,68,52,92,68,60,92,68,68,92,68,76,92,68,84,92,68,92,92,68,100,92,68,108,92,68,116,92,68,124,92,76,4,92,76,12,92,76,20,92,76,28,92,76,36,92,76,44,92,76,52,92,76,60,92,76,68,92,76,76,92,76,84,92,76,92,92,76,100,92,76,108,92,76,116,92,76,124,92,84,4,92,84,12,92,84,20,92,84,28,92,84,36,92,84,44,92,84,52,92,84,60,92,84,68,92,84,76,92,84,84,92,84,92,92,84,100,92,84,108,92,84,116,92,84,124,92,92,4,92,92,12,92,92,20,92,92,28,92,92,36,92,92,44,92,92,52,92,92,60,92,92,68,92,92,76,92,92,84,92,92,92,92,92,100,92,92,108,92,92,116,92,92,124,92,100,4,92,100,12,92,100,20,92,100,28,92,100,36,92,100,44,92,100,52,92,100,60,92,100,68,92,100,76,92,100,84,92,100,92,92,100,100,92,100,108,92,100,116,92,100,124,92,108,4,92,108,12,92,108,20,92,108,28,92,108,36,92,108,44,92,108,52,92,108,60,92,108,68,92,108,76,92,108,84,92,108,92,92,108,100,92,108,108,92,108,116,92,108,124,92,116,4,92,116,12,92,116,20,92,116,28,92,116,36,92,116,44,92,116,52,92,116,60,92,116,68,92,116,76,92,116,84,92,116,92,92,116,100,92,116,108,92,116,116,92,116,124,92,124,4,92,124,12,92,124,20,92,124,28,92,124,36,92,124,44,92,124,52,92,124,60,92,124,68,92,124,76,92,124,84,92,124,92,92,124,100,92,124,108,92,124,116,92,124,124,100,4,4,100,4,12,100,4,20,100,4,28,100,4,36,100,4,44,100,4,52,100,4,60,100,4,68,100,4,76,100,4,84,100,4,92,100,4,100,100,4,108,100,4,116,100,4,124,100,12,4,100,12,12,100,12,20,100,12,28,100,12,36,100,12,44,100,12,52,100,12,60,100,12,68,100,12,76,100,12,84,100,12,92,100,12,100,100,12,108,100,12,116,100,12,124,100,20,4,100,20,12,100,20,20,100,20,28,100,20,36,100,20,44,100,20,52,100,20,60,100,20,68,100,20,76,100,20,84,100,20,92,100,20,100,100,20,108,100,20,116,100,20,124,100,28,4,100,28,12,100,28,20,100,28,28,100,28,36,100,28,44,100,28,52,100,28,60,100,28,68,100,28,76,100,28,84,100,28,92,100,28,100,100,28,108,100,28,116,100,28,124,100,36,4,100,36,12,100,36,20,100,36,28,100,36,36,100,36,44,100,36,52,100,36,60,100,36,68,100,36,76,100,36,84,100,36,92,100,36,100,100,36,108,100,36,116,100,36,124,100,44,4,100,44,12,100,44,20,100,44,28,100,44,36,100,44,44,100,44,52,100,44,60,100,44,68,100,44,76,100,44,84,100,44,92,100,44,100,100,44,108,100,44,116,100,44,124,100,52,4,100,52,12,100,52,20,100,52,28,100,52,36,100,52,44,100,52,52,100,52,60,100,52,68,100,52,76,100,52,84,100,52,92,100,52,100,100,52,108,100,52,116,100,52,124,100,60,4,100,60,12,100,60,20,100,60,28,100,60,36,100,60,44,100,60,52,100,60,60,100,60,68,100,60,76,100,60,84,100,60,92,100,60,100,100,60,108,100,60,116,100,60,124,100,68,4,100,68,12,100,68,20,100,68,28,100,68,36,100,68,44,100,68,52,100,68,60,100,68,68,100,68,76,100,68,84,100,68,92,100,68,100,100,68,108,100,68,116,100,68,124,100,76,4,100,76,12,100,76,20,100,76,28,100,76,36,100,76,44,100,76,52,100,76,60,100,76,68,100,76,76,100,76,84,100,76,92,100,76,100,100,76,108,100,76,116,100,76,124,100,84,4,100,84,12,100,84,20,100,84,28,100,84,36,100,84,44,100,84,52,100,84,60,100,84,68,100,84,76,100,84,84,100,84,92,100,84,100,100,84,108,100,84,116,100,84,124,100,92,4,100,92,12,100,92,20,100,92,28,100,92,36,100,92,44,100,92,52,100,92,60,100,92,68,100,92,76,100,92,84,100,92,92,100,92,100,100,92,108,100,92,116,100,92,124,100,100,4,100,100,12,100,100,20,100,100,28,100,100,36,100,100,44,100,100,52,100,100,60,100,100,68,100,100,76,100,100,84,100,100,92,100,100,100,100,100,108,100,100,116,100,100,124,100,108,4,100,108,12,100,108,20,100,108,28,100,108,36,100,108,44,100,108,52,100,108,60,100,108,68,100,108,76,100,108,84,100,108,92,100,108,100,100,108,108,100,108,116,100,108,124,100,116,4,100,116,12,100,116,20,100,116,28,100,116,36,100,116,44,100,116,52,100,116,60,100,116,68,100,116,76,100,116,84,100,116,92,100,116,100,100,116,108,100,116,116,100,116,124,100,124,4,100,124,12,100,124,20,100,124,28,100,124,36,100,124,44,100,124,52,100,124,60,100,124,68,100,124,76,100,124,84,100,124,92,100,124,100,100,124,108,100,124,116,100,124,124,108,4,4,108,4,12,108,4,20,108,4,28,108,4,36,108,4,44,108,4,52,108,4,60,108,4,68,108,4,76,108,4,84,108,4,92,108,4,100,108,4,108,108,4,116,108,4,124,108,12,4,108,12,12,108,12,20,108,12,28,108,12,36,108,12,44,108,12,52,108,12,60,108,12,68,108,12,76,108,12,84,108,12,92,108,12,100,108,12,108,108,12,116,108,12,124,108,20,4,108,20,12,108,20,20,108,20,28,108,20,36,108,20,44,108,20,52,108,20,60,108,20,68,108,20,76,108,20,84,108,20,92,108,20,100,108,20,108,108,20,116,108,20,124,108,28,4,108,28,12,108,28,20,108,28,28,108,28,36,108,28,44,108,28,52,108,28,60,108,28,68,108,28,76,108,28,84,108,28,92,108,28,100,108,28,108,108,28,116,108,28,124,108,36,4,108,36,12,108,36,20,108,36,28,108,36,36,108,36,44,108,36,52,108,36,60,108,36,68,108,36,76,108,36,84,108,36,92,108,36,100,108,36,108,108,36,116,108,36,124,108,44,4,108,44,12,108,44,20,108,44,28,108,44,36,108,44,44,108,44,52,108,44,60,108,44,68,108,44,76,108,44,84,108,44,92,108,44,100,108,44,108,108,44,116,108,44,124,108,52,4,108,52,12,108,52,20,108,52,28,108,52,36,108,52,44,108,52,52,108,52,60,108,52,68,108,52,76,108,52,84,108,52,92,108,52,100,108,52,108,108,52,116,108,52,124,108,60,4,108,60,12,108,60,20,108,60,28,108,60,36,108,60,44,108,60,52,108,60,60,108,60,68,108,60,76,108,60,84,108,60,92,108,60,100,108,60,108,108,60,116,108,60,124,108,68,4,108,68,12,108,68,20,108,68,28,108,68,36,108,68,44,108,68,52,108,68,60,108,68,68,108,68,76,108,68,84,108,68,92,108,68,100,108,68,108,108,68,116,108,68,124,108,76,4,108,76,12,108,76,20,108,76,28,108,76,36,108,76,44,108,76,52,108,76,60,108,76,68,108,76,76,108,76,84,108,76,92,108,76,100,108,76,108,108,76,116,108,76,124,108,84,4,108,84,12,108,84,20,108,84,28,108,84,36,108,84,44,108,84,52,108,84,60,108,84,68,108,84,76,108,84,84,108,84,92,108,84,100,108,84,108,108,84,116,108,84,124,108,92,4,108,92,12,108,92,20,108,92,28,108,92,36,108,92,44,108,92,52,108,92,60,108,92,68,108,92,76,108,92,84,108,92,92,108,92,100,108,92,108,108,92,116,108,92,124,108,100,4,108,100,12,108,100,20,108,100,28,108,100,36,108,100,44,108,100,52,108,100,60,108,100,68,108,100,76,108,100,84,108,100,92,108,100,100,108,100,108,108,100,116,108,100,124,108,108,4,108,108,12,108,108,20,108,108,28,108,108,36,108,108,44,108,108,52,108,108,60,108,108,68,108,108,76,108,108,84,108,108,92,108,108,100,108,108,108,108,108,116,108,108,124,108,116,4,108,116,12,108,116,20,108,116,28,108,116,36,108,116,44,108,116,52,108,116,60,108,116,68,108,116,76,108,116,84,108,116,92,108,116,100,108,116,108,108,116,116,108,116,124,108,124,4,108,124,12,108,124,20,108,124,28,108,124,36,108,124,44,108,124,52,108,124,60,108,124,68,108,124,76,108,124,84,108,124,92,108,124,100,108,124,108,108,124,116,108,124,124,116,4,4,116,4,12,116,4,20,116,4,28,116,4,36,116,4,44,116,4,52,116,4,60,116,4,68,116,4,76,116,4,84,116,4,92,116,4,100,116,4,108,116,4,116,116,4,124,116,12,4,116,12,12,116,12,20,116,12,28,116,12,36,116,12,44,116,12,52,116,12,60,116,12,68,116,12,76,116,12,84,116,12,92,116,12,100,116,12,108,116,12,116,116,12,124,116,20,4,116,20,12,116,20,20,116,20,28,116,20,36,116,20,44,116,20,52,116,20,60,116,20,68,116,20,76,116,20,84,116,20,92,116,20,100,116,20,108,116,20,116,116,20,124,116,28,4,116,28,12,116,28,20,116,28,28,116,28,36,116,28,44,116,28,52,116,28,60,116,28,68,116,28,76,116,28,84,116,28,92,116,28,100,116,28,108,116,28,116,116,28,124,116,36,4,116,36,12,116,36,20,116,36,28,116,36,36,116,36,44,116,36,52,116,36,60,116,36,68,116,36,76,116,36,84,116,36,92,116,36,100,116,36,108,116,36,116,116,36,124,116,44,4,116,44,12,116,44,20,116,44,28,116,44,36,116,44,44,116,44,52,116,44,60,116,44,68,116,44,76,116,44,84,116,44,92,116,44,100,116,44,108,116,44,116,116,44,124,116,52,4,116,52,12,116,52,20,116,52,28,116,52,36,116,52,44,116,52,52,116,52,60,116,52,68,116,52,76,116,52,84,116,52,92,116,52,100,116,52,108,116,52,116,116,52,124,116,60,4,116,60,12,116,60,20,116,60,28,116,60,36,116,60,44,116,60,52,116,60,60,116,60,68,116,60,76,116,60,84,116,60,92,116,60,100,116,60,108,116,60,116,116,60,124,116,68,4,116,68,12,116,68,20,116,68,28,116,68,36,116,68,44,116,68,52,116,68,60,116,68,68,116,68,76,116,68,84,116,68,92,116,68,100,116,68,108,116,68,116,116,68,124,116,76,4,116,76,12,116,76,20,116,76,28,116,76,36,116,76,44,116,76,52,116,76,60,116,76,68,116,76,76,116,76,84,116,76,92,116,76,100,116,76,108,116,76,116,116,76,124,116,84,4,116,84,12,116,84,20,116,84,28,116,84,36,116,84,44,116,84,52,116,84,60,116,84,68,116,84,76,116,84,84,116,84,92,116,84,100,116,84,108,116,84,116,116,84,124,116,92,4,116,92,12,116,92,20,116,92,28,116,92,36,116,92,44,116,92,52,116,92,60,116,92,68,116,92,76,116,92,84,116,92,92,116,92,100,116,92,108,116,92,116,116,92,124,116,100,4,116,100,12,116,100,20,116,100,28,116,100,36,116,100,44,116,100,52,116,100,60,116,100,68,116,100,76,116,100,84,116,100,92,116,100,100,116,100,108,116,100,116,116,100,124,116,108,4,116,108,12,116,108,20,116,108,28,116,108,36,116,108,44,116,108,52,116,108,60,116,108,68,116,108,76,116,108,84,116,108,92,116,108,100,116,108,108,116,108,116,116,108,124,116,116,4,116,116,12,116,116,20,116,116,28,116,116,36,116,116,44,116,116,52,116,116,60,116,116,68,116,116,76,116,116,84,116,116,92,116,116,100,116,116,108,116,116,116,116,116,124,116,124,4,116,124,12,116,124,20,116,124,28,116,124,36,116,124,44,116,124,52,116,124,60,116,124,68,116,124,76,116,124,84,116,124,92,116,124,100,116,124,108,116,124,116,116,124,124,124,4,4,124,4,12,124,4,20,124,4,28,124,4,36,124,4,44,124,4,52,124,4,60,124,4,68,124,4,76,124,4,84,124,4,92,124,4,100,124,4,108,124,4,116,124,4,124,124,12,4,124,12,12,124,12,20,124,12,28,124,12,36,124,12,44,124,12,52,124,12,60,124,12,68,124,12,76,124,12,84,124,12,92,124,12,100,124,12,108,124,12,116,124,12,124,124,20,4,124,20,12,124,20,20,124,20,28,124,20,36,124,20,44,124,20,52,124,20,60,124,20,68,124,20,76,124,20,84,124,20,92,124,20,100,124,20,108,124,20,116,124,20,124,124,28,4,124,28,12,124,28,20,124,28,28,124,28,36,124,28,44,124,28,52,124,28,60,124,28,68,124,28,76,124,28,84,124,28,92,124,28,100,124,28,108,124,28,116,124,28,124,124,36,4,124,36,12,124,36,20,124,36,28,124,36,36,124,36,44,124,36,52,124,36,60,124,36,68,124,36,76,124,36,84,124,36,92,124,36,100,124,36,108,124,36,116,124,36,124,124,44,4,124,44,12,124,44,20,124,44,28,124,44,36,124,44,44,124,44,52,124,44,60,124,44,68,124,44,76,124,44,84,124,44,92,124,44,100,124,44,108,124,44,116,124,44,124,124,52,4,124,52,12,124,52,20,124,52,28,124,52,36,124,52,44,124,52,52,124,52,60,124,52,68,124,52,76,124,52,84,124,52,92,124,52,100,124,52,108,124,52,116,124,52,124,124,60,4,124,60,12,124,60,20,124,60,28,124,60,36,124,60,44,124,60,52,124,60,60,124,60,68,124,60,76,124,60,84,124,60,92,124,60,100,124,60,108,124,60,116,124,60,124,124,68,4,124,68,12,124,68,20,124,68,28,124,68,36,124,68,44,124,68,52,124,68,60,124,68,68,124,68,76,124,68,84,124,68,92,124,68,100,124,68,108,124,68,116,124,68,124,124,76,4,124,76,12,124,76,20,124,76,28,124,76,36,124,76,44,124,76,52,124,76,60,124,76,68,124,76,76,124,76,84,124,76,92,124,76,100,124,76,108,124,76,116,124,76,124,124,84,4,124,84,12,124,84,20,124,84,28,124,84,36,124,84,44,124,84,52,124,84,60,124,84,68,124,84,76,124,84,84,124,84,92,124,84,100,124,84,108,124,84,116,124,84,124,124,92,4,124,92,12,124,92,20,124,92,28,124,92,36,124,92,44,124,92,52,124,92,60,124,92,68,124,92,76,124,92,84,124,92,92,124,92,100,124,92,108,124,92,116,124,92,124,124,100,4,124,100,12,124,100,20,124,100,28,124,100,36,124,100,44,124,100,52,124,100,60,124,100,68,124,100,76,124,100,84,124,100,92,124,100,100,124,100,108,124,100,116,124,100,124,124,108,4,124,108,12,124,108,20,124,108,28,124,108,36,124,108,44,124,108,52,124,108,60,124,108,68,124,108,76,124,108,84,124,108,92,124,108,100,124,108,108,124,108,116,124,108,124,124,116,4,124,116,12,124,116,20,124,116,28,124,116,36,124,116,44,124,116,52,124,116,60,124,116,68,124,116,76,124,116,84,124,116,92,124,116,100,124,116,108,124,116,116,124,116,124,124,124,4,124,124,12,124,124,20,124,124,28,124,124,36,124,124,44,124,124,52,124,124,60,124,124,68,124,124,76,124,124,84,124,124,92,124,124,100,124,124,108,124,124,116,124,124,124};

	int sector_cnt = 0;

	gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,DEAPODIZATION);

	EXPECT_NEAR(gdata[get3DC2lin(51,50,65,128)].x,0.0444f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(56,50,65,128)].x,-0.0269f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(60,50,65,128)].x,-0.0187f,epsilon);

	/*for (int j=0; j<im_width; j++)
	{
		for (int i=0; i<im_width; i++)
			if (i >= 50 && i <= 70 && j >= 50 && j <= 70)
				printf("%.4f ",gdata[get3DC2lin(i,j,65,im_width)].x);
		
		if (j >= 50 && j <= 70)
			printf("\n");
	}*/
	
	free(data);
	free(coords);
	free(gdata);
	free(kern);
}

TEST(TestGPUGriddingFFT,GPUTest_FactorTwoTest)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;
	//kernel width
	int kernel_width = 3;

	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);

	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 16;

	//Data
	int data_entries = 5;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	int data_cnt = 0;
	data[data_cnt++] = 0.5f;
	data[data_cnt++] = 0.5f;
	
	data[data_cnt++] = 0.5f;
	data[data_cnt++] = 0.5f;
	
	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	data[data_cnt++] = 1;
	data[data_cnt++] = 1;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	int coord_cnt = 0;
	//7.Sektor
	coords[coord_cnt++] = 0; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	//8.Sektor
	coords[coord_cnt++] = 0; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.5f; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0.3f;
	coords[coord_cnt++] = 0;

	//Output Grid
    CufftType* gdata;
	unsigned long dims_g[4];
    dims_g[0] = 1; // complex
	dims_g[1] = (unsigned long)(im_width * osr); 
    dims_g[2] = (unsigned long)(im_width * osr);
    dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];

    gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 8;
	
	int sector_count = 8;
	int* sectors = (int*) calloc(2*sector_count,sizeof(int));
	sectors[0]=0;
	sectors[1]=0;
	sectors[2]=0;
	sectors[3]=0;
	sectors[4]=0;
	sectors[5]=0;
	sectors[6]=0;
	sectors[7]=0;
	sectors[8]=5;

	int* sector_centers = (int*) calloc(3*sector_count,sizeof(int));
	int sector_cnt = 0;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 2;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;

	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;
	sector_centers[sector_cnt++] = 7;

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);

	int index = get3DC2lin(5,5,5,im_width);
	printf("index to test %d\n",index);
	
	EXPECT_NEAR(gdata[get3DC2lin(8,8,5,16)].x,-0.0129f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(2,2,5,16)].x,-3.5118f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(4,3,5,16)].x,1.7624f,epsilon);
	/*for (int j=0; j<im_width; j++)
	{
		for (int i=0; i<im_width; i++)
			printf("%.4f ",gdata[get3DC2lin(i,j,5,im_width)].x);
		printf("\n");
	}*/
	free(data);
	free(coords);
	free(gdata);
	free(kern);
	free(sectors);
	free(sector_centers);
}

TEST(DISABLED_TestGPUGriddingFFT,GPUTest_8SectorsKernel3nDataw32)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;
	//kernel width
	int kernel_width = 3;

	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);

	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 32;

	//Data
	int data_entries = 5;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	int data_cnt = 0;
	
	data[data_cnt++] = 0.5f;
	data[data_cnt++] = 0;
	
	data[data_cnt++] = 0.7f;
	data[data_cnt++] = 0;

	data[data_cnt++] = -0.2f;
	data[data_cnt++] = 0.8f;
	
	data[data_cnt++] = -0.2f;
	data[data_cnt++] = 0.8f;

	data[data_cnt++] = 1;
  data[data_cnt++] = 0;


	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	int coord_cnt = 0;
	coords[coord_cnt++] = -0.3f; 
	coords[coord_cnt++] = 0.2f;
	coords[coord_cnt++] = 0;
	
	coords[coord_cnt++] = -0.1f;
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	coords[coord_cnt++] = 0.5f; 
	coords[coord_cnt++] = 0;
	coords[coord_cnt++] = 0;

	//Output Grid
  CufftType* gdata;
	unsigned long dims_g[4];
  dims_g[0] = 1; // complex
	dims_g[1] = (unsigned long)(im_width * osr); 
  dims_g[2] = (unsigned long)(im_width * osr);
  dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];
  gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 8;
	
	const int sector_count = 64;
	//int* sectors = (int*) calloc(sector_count+1,sizeof(int));
	//extracted from matlab
	int sectors[sector_count+1] = {0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5};

	//int* sector_centers = (int*) calloc(3*sector_count,sizeof(int));
	int sector_cnt = 0;
	
	int sector_centers[3*sector_count] = {4,4,4,4,4,12,4,4,20,4,4,28,4,12,4,4,12,12,4,12,20,4,12,28,4,20,4,4,20,12,4,20,20,4,20,28,4,28,4,4,28,12,4,28,20,4,28,28,12,4,4,12,4,12,12,4,20,12,4,28,12,12,4,12,12,12,12,12,20,12,12,28,12,20,4,12,20,12,12,20,20,12,20,28,12,28,4,12,28,12,12,28,20,12,28,28,20,4,4,20,4,12,20,4,20,20,4,28,20,12,4,20,12,12,20,12,20,20,12,28,20,20,4,20,20,12,20,20,20,20,20,28,20,28,4,20,28,12,20,28,20,20,28,28,28,4,4,28,4,12,28,4,20,28,4,28,28,12,4,28,12,12,28,12,20,28,12,28,28,20,4,28,20,12,28,20,20,28,20,28,28,28,4,28,28,12,28,28,20,28,28,28};

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);

	/*for (int j=0; j<im_width; j++)
	{
		for (int i=0; i<im_width; i++)
		{
			float dpr = gdata[get3DC2lin(i,im_width-1-j,16,im_width)].x;
			float dpi = gdata[get3DC2lin(i,im_width-1-j,16,im_width)].y;

			if (abs(dpr) > 0.0f)
				printf("(%d,%d)= %.4f + %.4f i ",i,im_width-1-j,dpr,dpi);
		}
		printf("\n");
	}*/

	EXPECT_NEAR(gdata[get3DC2lin(12,16,16,im_width)].x,0.4289f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(13,16,16,im_width)].x,0.6803f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(14,16,16,im_width)].x,0.2065f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(15,16,16,im_width)].x,-0.1801f,epsilon);//Re
	EXPECT_NEAR(gdata[get3DC2lin(15,16,16,im_width)].y,0.7206f,epsilon);//Im
	EXPECT_NEAR(gdata[get3DC2lin(16,16,16,im_width)].x,-0.4f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(16,16,16,im_width)].y,1.6f,epsilon);
  EXPECT_NEAR(gdata[get3DC2lin(17,16,16,im_width)].x,-0.1801f,epsilon);//Re
	EXPECT_NEAR(gdata[get3DC2lin(17,16,16,im_width)].y,0.7206f,epsilon);//Im

	EXPECT_NEAR(gdata[get3DC2lin(12,15,16,im_width)].x,0.1932f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(14,17,16,im_width)].x,0.0930f,epsilon);
	
	free(data);
	free(coords);
	free(gdata);
	free(kern);
	//free(sectors);
	//free(sector_centers);
}

TEST(DISABLED_TestGPUGriddingFFT,MatlabTest_8SK3w32)
{
	//oversampling ratio
	float osr = DEFAULT_OVERSAMPLING_RATIO;
	//kernel width
	int kernel_width = 3;

	long kernel_entries = calculateGrid3KernelSize(osr, kernel_width/2.0f);

	DType *kern = (DType*) calloc(kernel_entries,sizeof(DType));
	loadGrid3Kernel(kern,kernel_entries,kernel_width,osr);

	//Image
	int im_width = 32;

	//Data
	int data_entries = 1;
    DType* data = (DType*) calloc(2*data_entries,sizeof(DType)); //2* re + im
	int data_cnt = 0;
	
	data[data_cnt++] = 0.0046f;
	data[data_cnt++] = -0.0021f;

	//Coords
	//Scaled between -0.5 and 0.5
	//in triplets (x,y,z)
    DType* coords = (DType*) calloc(3*data_entries,sizeof(DType));//3* x,y,z
	int coord_cnt = 0;

	coords[coord_cnt++] = 0.2500f;
	coords[coord_cnt++] = -0.4330f;
	coords[coord_cnt++] = 0;
	
	//Output Grid
  CufftType* gdata;
	unsigned long dims_g[4];
  dims_g[0] = 1; // complex
	dims_g[1] = (unsigned long)(im_width * osr); 
  dims_g[2] = (unsigned long)(im_width * osr);
  dims_g[3] = (unsigned long)(im_width * osr);

	long grid_size = dims_g[0]*dims_g[1]*dims_g[2]*dims_g[3];
  gdata = (CufftType*) calloc(grid_size,sizeof(CufftType));
	
	//sectors of data, count and start indices
	int sector_width = 8;
	
	const int sector_count = 64;
	//int* sectors = (int*) calloc(sector_count+1,sizeof(int));
	//extracted from matlab
	int sectors[sector_count+1] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

	//int* sector_centers = (int*) calloc(3*sector_count,sizeof(int));
	int sector_cnt = 0;
	
	int sector_centers[3*sector_count] = {4,4,4,4,4,12,4,4,20,4,4,28,4,12,4,4,12,12,4,12,20,4,12,28,4,20,4,4,20,12,4,20,20,4,20,28,4,28,4,4,28,12,4,28,20,4,28,28,12,4,4,12,4,12,12,4,20,12,4,28,12,12,4,12,12,12,12,12,20,12,12,28,12,20,4,12,20,12,12,20,20,12,20,28,12,28,4,12,28,12,12,28,20,12,28,28,20,4,4,20,4,12,20,4,20,20,4,28,20,12,4,20,12,12,20,12,20,20,12,28,20,20,4,20,20,12,20,20,20,20,20,28,20,28,4,20,28,12,20,28,20,20,28,28,28,4,4,28,4,12,28,4,20,28,4,28,28,12,4,28,12,12,28,12,20,28,12,28,28,20,4,28,20,12,28,20,20,28,20,28,28,28,4,28,28,12,28,28,20,28,28,28};

gridding3D_gpu(data,data_entries,1,coords,gdata,grid_size,dims_g[1],kern,kernel_entries, kernel_width,sectors,sector_count,sector_centers,sector_width, im_width,osr,FFT);

	for (int j=0; j<im_width; j++)
	{
		for (int i=0; i<im_width; i++)
		{
			float dpr = gdata[get3DC2lin(i,im_width-1-j,16,im_width)].x;
			float dpi = gdata[get3DC2lin(i,im_width-1-j,16,im_width)].y;

			if (abs(dpr) > 0.0f)
				printf("(%d,%d)= %.4f + %.4f i ",i,im_width-1-j,dpr,dpi);
		}
		printf("\n");
	}

	/*EXPECT_NEAR(gdata[get3DC2lin(23,3,16,im_width)].x,0.0012f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(23,2,16,im_width)].x,0.0020f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(23,1,16,im_width)].x,0.0007f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(24,3,16,im_width)].x,0.0026f,epsilon);//Re
	EXPECT_NEAR(gdata[get3DC2lin(24,3,16,im_width)].y,-0.0012f,epsilon);//Im
	EXPECT_NEAR(gdata[get3DC2lin(24,2,16,im_width)].x,0.0045f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(24,1,16,im_width)].x,0.0016f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(25,3,16,im_width)].x,0.0012f,epsilon);
	EXPECT_NEAR(gdata[get3DC2lin(25,2,16,im_width)].x,0.0020f,epsilon);//Re
	EXPECT_NEAR(gdata[get3DC2lin(25,2,16,im_width)].y,-0.0009f,epsilon);//Im
	EXPECT_NEAR(gdata[get3DC2lin(25,1,16,im_width)].x,0.0007f,epsilon);
	*/
	free(data);
	free(coords);
	free(gdata);
	free(kern);
	//free(sectors);
	//free(sector_centers);
}
